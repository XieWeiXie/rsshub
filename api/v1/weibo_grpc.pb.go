// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: api/v1/weibo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeiboClient is the client API for Weibo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeiboClient interface {
	// Hi
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloReply, error)
	// 获取最新原创微博
	NewOriginWeibo(ctx context.Context, in *NewOriginWeiboReq, opts ...grpc.CallOption) (*NewOriginWeiboReply, error)
	// 全量获取
	NewAllWeibo(ctx context.Context, in *NewAllWeiboReq, opts ...grpc.CallOption) (Weibo_NewAllWeiboClient, error)
	// 新增监控对象
	NewAddWeibo(ctx context.Context, in *NewAddWeiboReq, opts ...grpc.CallOption) (*NewAddWeiboReply, error)
	// 监控对象列表
	WeiboUsers(ctx context.Context, in *WeiboUsersReq, opts ...grpc.CallOption) (*WeiboUsersReply, error)
}

type weiboClient struct {
	cc grpc.ClientConnInterface
}

func NewWeiboClient(cc grpc.ClientConnInterface) WeiboClient {
	return &weiboClient{cc}
}

func (c *weiboClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/rsshub.v1.Weibo/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weiboClient) NewOriginWeibo(ctx context.Context, in *NewOriginWeiboReq, opts ...grpc.CallOption) (*NewOriginWeiboReply, error) {
	out := new(NewOriginWeiboReply)
	err := c.cc.Invoke(ctx, "/rsshub.v1.Weibo/NewOriginWeibo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weiboClient) NewAllWeibo(ctx context.Context, in *NewAllWeiboReq, opts ...grpc.CallOption) (Weibo_NewAllWeiboClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weibo_ServiceDesc.Streams[0], "/rsshub.v1.Weibo/NewAllWeibo", opts...)
	if err != nil {
		return nil, err
	}
	x := &weiboNewAllWeiboClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weibo_NewAllWeiboClient interface {
	Recv() (*NewAllWeiboReply, error)
	grpc.ClientStream
}

type weiboNewAllWeiboClient struct {
	grpc.ClientStream
}

func (x *weiboNewAllWeiboClient) Recv() (*NewAllWeiboReply, error) {
	m := new(NewAllWeiboReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weiboClient) NewAddWeibo(ctx context.Context, in *NewAddWeiboReq, opts ...grpc.CallOption) (*NewAddWeiboReply, error) {
	out := new(NewAddWeiboReply)
	err := c.cc.Invoke(ctx, "/rsshub.v1.Weibo/NewAddWeibo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weiboClient) WeiboUsers(ctx context.Context, in *WeiboUsersReq, opts ...grpc.CallOption) (*WeiboUsersReply, error) {
	out := new(WeiboUsersReply)
	err := c.cc.Invoke(ctx, "/rsshub.v1.Weibo/WeiboUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeiboServer is the server API for Weibo service.
// All implementations must embed UnimplementedWeiboServer
// for forward compatibility
type WeiboServer interface {
	// Hi
	Hello(context.Context, *HelloReq) (*HelloReply, error)
	// 获取最新原创微博
	NewOriginWeibo(context.Context, *NewOriginWeiboReq) (*NewOriginWeiboReply, error)
	// 全量获取
	NewAllWeibo(*NewAllWeiboReq, Weibo_NewAllWeiboServer) error
	// 新增监控对象
	NewAddWeibo(context.Context, *NewAddWeiboReq) (*NewAddWeiboReply, error)
	// 监控对象列表
	WeiboUsers(context.Context, *WeiboUsersReq) (*WeiboUsersReply, error)
	mustEmbedUnimplementedWeiboServer()
}

// UnimplementedWeiboServer must be embedded to have forward compatible implementations.
type UnimplementedWeiboServer struct {
}

func (UnimplementedWeiboServer) Hello(context.Context, *HelloReq) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedWeiboServer) NewOriginWeibo(context.Context, *NewOriginWeiboReq) (*NewOriginWeiboReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOriginWeibo not implemented")
}
func (UnimplementedWeiboServer) NewAllWeibo(*NewAllWeiboReq, Weibo_NewAllWeiboServer) error {
	return status.Errorf(codes.Unimplemented, "method NewAllWeibo not implemented")
}
func (UnimplementedWeiboServer) NewAddWeibo(context.Context, *NewAddWeiboReq) (*NewAddWeiboReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAddWeibo not implemented")
}
func (UnimplementedWeiboServer) WeiboUsers(context.Context, *WeiboUsersReq) (*WeiboUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeiboUsers not implemented")
}
func (UnimplementedWeiboServer) mustEmbedUnimplementedWeiboServer() {}

// UnsafeWeiboServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeiboServer will
// result in compilation errors.
type UnsafeWeiboServer interface {
	mustEmbedUnimplementedWeiboServer()
}

func RegisterWeiboServer(s grpc.ServiceRegistrar, srv WeiboServer) {
	s.RegisterService(&Weibo_ServiceDesc, srv)
}

func _Weibo_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeiboServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsshub.v1.Weibo/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeiboServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weibo_NewOriginWeibo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOriginWeiboReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeiboServer).NewOriginWeibo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsshub.v1.Weibo/NewOriginWeibo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeiboServer).NewOriginWeibo(ctx, req.(*NewOriginWeiboReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weibo_NewAllWeibo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewAllWeiboReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeiboServer).NewAllWeibo(m, &weiboNewAllWeiboServer{stream})
}

type Weibo_NewAllWeiboServer interface {
	Send(*NewAllWeiboReply) error
	grpc.ServerStream
}

type weiboNewAllWeiboServer struct {
	grpc.ServerStream
}

func (x *weiboNewAllWeiboServer) Send(m *NewAllWeiboReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Weibo_NewAddWeibo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAddWeiboReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeiboServer).NewAddWeibo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsshub.v1.Weibo/NewAddWeibo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeiboServer).NewAddWeibo(ctx, req.(*NewAddWeiboReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weibo_WeiboUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeiboUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeiboServer).WeiboUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsshub.v1.Weibo/WeiboUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeiboServer).WeiboUsers(ctx, req.(*WeiboUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Weibo_ServiceDesc is the grpc.ServiceDesc for Weibo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weibo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsshub.v1.Weibo",
	HandlerType: (*WeiboServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Weibo_Hello_Handler,
		},
		{
			MethodName: "NewOriginWeibo",
			Handler:    _Weibo_NewOriginWeibo_Handler,
		},
		{
			MethodName: "NewAddWeibo",
			Handler:    _Weibo_NewAddWeibo_Handler,
		},
		{
			MethodName: "WeiboUsers",
			Handler:    _Weibo_WeiboUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewAllWeibo",
			Handler:       _Weibo_NewAllWeibo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/weibo.proto",
}
